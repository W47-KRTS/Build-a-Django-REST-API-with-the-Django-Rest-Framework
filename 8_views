from rest_framework import generics
from rest_framework.decorators import api_view
from rest_framework.response import Response
# from django.http import Http404
from django.shortcuts import get_object_or_404

from products.models import Product
from products.serializers import ProductSerializer

# POST method - create smth
# GET method - list smth (qeeryset)


class ProductListCreateAPIView(generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer


    def perform_create(self, serializer):
        # serializer.save(user=self.request.user)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') or None
        if content is None:
            content = title
            serializer.save(content=content)
        #send a Django signal

product_list_create_view = ProductListCreateAPIView.as_view()


class ProductDetailAPIView(generics.RetrieveAPIView):
    queryset = Product.objects.all() 
    serializer_class = ProductSerializer


product_detail_view = ProductDetailAPIView.as_view()


class ProductUpdateAPIView(generics.UpdateAPIView):
    queryset = Product.objects.all() 
    serializer_class = ProductSerializer
    lookup_field = 'pk'

    def perform_update(self, serializer):
        instance = serializer.save()
        if not instance.content:
            instance.content = instance.title

product_update_view = ProductUpdateAPIView.as_view()

class ProductDestroyAPIView(generics.DestroyAPIView):
    queryset = Product.objects.all() 
    serializer_class = ProductSerializer
    lookup_field = 'pk'

    def perform_destroy(self, serializer):
        # instance
        super().perform_destroy()

product_destroy_view = ProductDestroyAPIView.as_view()



# class ProductDetailAPIView(generics.RetrieveAPIView):
#    queryset = Product.objects.all() 
#    serializer_class = ProductSerializer
    #lookup_field = 'pk'

# product_detail_view = ProductDetailAPIView.as_view()

@api_view(['GET', 'POST']) #allow the GET and POST methods
def product_alt_view(request, pk=None, *args, **kwargs):
    # pk = primary key = the keyword argument
    method = request.method # distinguish based on the request method

    if method =="GET":
        if pk is not None:
            # detail view
            obj = get_object_or_404(Product, pk=pk)
            data = ProductSerializer(obj, many=False).data
            return Response(data)
        # else: list view
        queryset = Product.objects.all() # qs - create a list view
        #serialize the queryset
        data = ProductSerializer(queryset, many=True).data # serialize the qs
        # enrich the serializer with a serializer method field
        return Response(data)
    
    if method == 'POST':
        # create an item
        serializer = ProductSerializer(data=request.data) #verify the data
        if serializer.is_valid(raise_exception=True):
            title = serializer.validated_data.get('title')
            content = serializer.validated_data.get('content') or None
            if content is None:
                content = title
            serializer.save(content=content)
            # instance = serializer.save()
            # instance = form.save()
            # print(serializer.data)
            return Response(serializer.data) 
        return Response({"Invalid": "not good data"}, status=400)
