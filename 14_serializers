from rest_framework import serializers
from rest_framework.reverse import reverse
from products.models import Product

class ProductSerializer(serializers.ModelSerializer):
    my_discount = serializers.SerializerMethodField(read_only=True)
    edit_url = serializers.SerializerMethodField(read_only=True)
    url = serializers.HyperlinkedIdentityField(view_name='product-detail', lookup_field = 'pk')
    class Meta:
        # when we use a serializermethodfield on a modelderializer
        # it s assumed that there is an instance attached to it 
        # because there is a model attaceht to it
        model = Product
        fields = [
            'url',
            'edit_url',
            'pk',
            'title',
            'content',
            'price',
            'sale_price',
            'my_discount'
        ]


    def get_edit_url(self,obj):
        request = self.context.get('request') #self.request
        if request is None:
            return None
        return reverse("product-edit", kwargs={"pk": obj.pk}, request=request)
        #"" -declare the viewname 


    def get_my_discount(self, obj):
        if not hasattr(obj, 'id'):
            return None
        if not isinstance(obj, Product): # checking data - instance of a class
            return None
        return obj.get_discount()
        
